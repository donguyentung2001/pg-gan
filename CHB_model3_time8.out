2021-07-17 08:12:32.230229: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library libcuda.so.1
2021-07-17 08:12:32.257042: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:981] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2021-07-17 08:12:32.257909: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1561] Found device 0 with properties: 
pciBusID: 0000:01:00.0 name: Quadro P2000 computeCapability: 6.1
coreClock: 1.4805GHz coreCount: 8 deviceMemorySize: 4.93GiB deviceMemoryBandwidth: 130.53GiB/s
2021-07-17 08:12:32.257985: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library 'libcudart.so.10.1'; dlerror: libcudart.so.10.1: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /usr/local/cuda-10.1/lib64:/usr/local/cuda/extras/CUPTI/lib64:/packages/cs/python3.7.7/lib
2021-07-17 08:12:32.258027: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library 'libcublas.so.10'; dlerror: libcublas.so.10: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /usr/local/cuda-10.1/lib64:/usr/local/cuda/extras/CUPTI/lib64:/packages/cs/python3.7.7/lib
2021-07-17 08:12:32.258065: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library 'libcufft.so.10'; dlerror: libcufft.so.10: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /usr/local/cuda-10.1/lib64:/usr/local/cuda/extras/CUPTI/lib64:/packages/cs/python3.7.7/lib
2021-07-17 08:12:32.258102: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library 'libcurand.so.10'; dlerror: libcurand.so.10: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /usr/local/cuda-10.1/lib64:/usr/local/cuda/extras/CUPTI/lib64:/packages/cs/python3.7.7/lib
2021-07-17 08:12:32.258138: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library 'libcusolver.so.10'; dlerror: libcusolver.so.10: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /usr/local/cuda-10.1/lib64:/usr/local/cuda/extras/CUPTI/lib64:/packages/cs/python3.7.7/lib
2021-07-17 08:12:32.258175: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library 'libcusparse.so.10'; dlerror: libcusparse.so.10: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /usr/local/cuda-10.1/lib64:/usr/local/cuda/extras/CUPTI/lib64:/packages/cs/python3.7.7/lib
2021-07-17 08:12:32.258212: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library 'libcudnn.so.7'; dlerror: libcudnn.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /usr/local/cuda-10.1/lib64:/usr/local/cuda/extras/CUPTI/lib64:/packages/cs/python3.7.7/lib
2021-07-17 08:12:32.258218: W tensorflow/core/common_runtime/gpu/gpu_device.cc:1598] Cannot dlopen some GPU libraries. Please make sure the missing libraries mentioned above are installed properly if you would like to use GPU. Follow the guide at https://www.tensorflow.org/install/gpu for how to download and setup the required libraries for your platform.
Skipping registering GPU devices...
2021-07-17 08:12:32.258421: I tensorflow/core/platform/cpu_feature_guard.cc:143] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA
2021-07-17 08:12:32.262858: I tensorflow/core/platform/profile_utils/cpu_utils.cc:102] CPU Frequency: 3000000000 Hz
2021-07-17 08:12:32.263124: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x7ff4b0000b60 initialized for platform Host (this does not guarantee that XLA will be used). Devices:
2021-07-17 08:12:32.263135: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version
2021-07-17 08:12:32.264055: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1102] Device interconnect StreamExecutor with strength 1 edge matrix:
2021-07-17 08:12:32.264068: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1108]      
NUM_ITER 1
BATCH_SIZE 50
NUM_BATCH 100
NUM_SNPS 36
L 50000
NUM_CLASSES 2
NUM_CHANNELS 2
NUM_ITER 1
BATCH_SIZE 50
NUM_BATCH 100
NUM_SNPS 36
L 50000
NUM_CLASSES 2
NUM_CHANNELS 2
{'model': 'exp', 'params': 'N1,N2,growth,T1,T2', 'data_h5': '/bigdata/smathieson/pg-gan/1000g/HDF5/CHB.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.h5', 'bed': '/bigdata/smathieson/pg-gan/1000g/HDF5/20120824_strict_mask.bed', 'reco_folder': None, 'grid': None, 'toy': None, 'seed': 1833}
N1,N2,growth,T1,T2
[<util.Parameter object at 0x7ff5bfced050>, <util.Parameter object at 0x7ff5c01a81d0>, <util.Parameter object at 0x7ff5c01a8990>, <util.Parameter object at 0x7ff5c01a8cd0>, <util.Parameter object at 0x7ff5c01a8ad0>]
['N1', 'N2', 'growth', 'T1', 'T2']
NAME	VALUE	MIN	MAX
N1	9000	1000	30000
NAME	VALUE	MIN	MAX
N2	5000	1000	30000
NAME	VALUE	MIN	MAX
growth	0.005	0.0	0.05
NAME	VALUE	MIN	MAX
T1	2000	1500	5000
NAME	VALUE	MIN	MAX
T2	350	100	1500
['calldata', 'variants']
['GT'] ['CHROM', 'POS']
raw (11703947, 99, 2)
after haps (11703947, 198)
parameters <class 'list'> [<util.Parameter object at 0x7ff5bfced050>, <util.Parameter object at 0x7ff5c01a81d0>, <util.Parameter object at 0x7ff5c01a8990>, <util.Parameter object at 0x7ff5c01a8cd0>, <util.Parameter object at 0x7ff5c01a8ad0>]
Model: "one_pop_model"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
conv2d (Conv2D)              (None, 198, 32, 32)       352       
_________________________________________________________________
conv2d_1 (Conv2D)            (None, 198, 12, 64)       10304     
_________________________________________________________________
max_pooling2d (MaxPooling2D) multiple                  0         
_________________________________________________________________
flatten (Flatten)            (None, 384)               0         
_________________________________________________________________
dropout (Dropout)            (None, 128)               0         
_________________________________________________________________
dense (Dense)                (None, 128)               49280     
_________________________________________________________________
dense_1 (Dense)              (None, 128)               16512     
_________________________________________________________________
dense_2 (Dense)              (None, 4)                 516       
_________________________________________________________________
dense_3 (Dense)              (None, 1)                 5         
=================================================================
Total params: 76,969
Trainable params: 76,969
Non-trainable params: 0
_________________________________________________________________
pretraining starts
at iteration  1
Epoch 20, Loss: 0.8291739225387573
Epoch 40, Loss: 0.8201562166213989
Epoch 60, Loss: 0.8168935775756836
Epoch 80, Loss: 0.8067870140075684
Epoch 100, Loss: 0.7921831011772156
The number of layers in encoder is  8
The number of layers in discriminator is  9
changing discriminator's weights in layer  0
changing discriminator's weights in layer  1
changing discriminator's weights in layer  2
changing discriminator's weights in layer  3
changing discriminator's weights in layer  4
changing discriminator's weights in layer  5
changing discriminator's weights in layer  6
changing discriminator's weights in layer  7
finish pretraining with VAE. The discriminator layers should now be updated. 
 Now we find the best parameters for the discriminators. 
conv2d_2 (1, 5, 2, 32)
tf.Tensor([0.9131477  0.29830587 0.16854617 0.33524582 0.9705589 ], shape=(5,), dtype=float32)
tf.Tensor([0.08212297 0.62205136 0.30204028 0.34514004 0.7823687 ], shape=(5,), dtype=float32)
(32, 2, 5)
tf.Tensor([0.9131477  0.29830587 0.16854617 0.33524582 0.9705589 ], shape=(5,), dtype=float32)
tf.Tensor([0.3007087  0.38909182 0.21364069 0.90330255 0.86225617], shape=(5,), dtype=float32)
tf.Tensor([0.8196398  0.9024123  0.87877995 0.34079188 0.34757894], shape=(5,), dtype=float32)
tf.Tensor([0.60974395 0.00401153 0.04501114 0.02155217 0.6897947 ], shape=(5,), dtype=float32)
tf.Tensor([0.7158999  0.79793197 0.31407413 0.48095357 0.2603374 ], shape=(5,), dtype=float32)
tf.Tensor([0.8667173  0.8436694  0.5419696  0.18132254 0.10506269], shape=(5,), dtype=float32)
tf.Tensor([0.7339507  0.7295496  0.07202455 0.6043416  0.5376311 ], shape=(5,), dtype=float32)
tf.Tensor([0.3822612  0.02562281 0.5137599  0.0869606  0.96917677], shape=(5,), dtype=float32)
tf.Tensor([0.11106966 0.08118835 0.         0.32449913 0.5801424 ], shape=(5,), dtype=float32)
tf.Tensor([0.98011434 0.49739712 0.8783726  0.6496571  0.49385676], shape=(5,), dtype=float32)
tf.Tensor([0.40233916 0.18828823 0.52419645 0.37149516 0.63237494], shape=(5,), dtype=float32)
tf.Tensor([0.97626656 0.5604559  0.67971104 0.40306076 0.85205364], shape=(5,), dtype=float32)
tf.Tensor([0.01531846 0.03837664 0.6339469  0.02792728 0.21104085], shape=(5,), dtype=float32)
tf.Tensor([0.19665083 0.9922369  0.05797511 0.9835671  0.0537138 ], shape=(5,), dtype=float32)
tf.Tensor([0.8220447  0.37925446 0.6374242  0.95033294 0.05681866], shape=(5,), dtype=float32)
tf.Tensor([0.74629515 0.7045331  0.07147266 0.8423804  0.6140811 ], shape=(5,), dtype=float32)
tf.Tensor([0.64211416 0.9132688  0.5625611  0.15902486 0.56591666], shape=(5,), dtype=float32)
tf.Tensor([0.9409459  0.01904521 0.24050178 0.8049759  0.7100831 ], shape=(5,), dtype=float32)
tf.Tensor([0.09238824 0.3715749  0.6516771  0.13210481 0.6554501 ], shape=(5,), dtype=float32)
tf.Tensor([0.37395167 0.31232023 0.6032964  0.3474969  0.7205686 ], shape=(5,), dtype=float32)
tf.Tensor([0.52341205 0.04079765 0.8253226  0.2624787  0.02195584], shape=(5,), dtype=float32)
tf.Tensor([0.7449925  0.10781654 0.8578716  0.6050178  0.6743287 ], shape=(5,), dtype=float32)
tf.Tensor([0.21429747 0.70374525 0.48778668 0.94600195 0.93055767], shape=(5,), dtype=float32)
tf.Tensor([0.62045217 0.7571177  0.18902874 0.62470406 0.9806317 ], shape=(5,), dtype=float32)
tf.Tensor([0.86525637 0.9084592  0.79241127 0.36016956 0.21277387], shape=(5,), dtype=float32)
tf.Tensor([0.91167116 0.91544867 0.30165097 0.07944654 0.3913951 ], shape=(5,), dtype=float32)
tf.Tensor([0.47169176 0.7526063  0.9399452  0.5697369  0.9036948 ], shape=(5,), dtype=float32)
tf.Tensor([0.7781849  0.74611497 0.2877639  0.15055521 0.00896076], shape=(5,), dtype=float32)
tf.Tensor([0.87110037 0.9028751  0.04732259 0.7120622  0.11616727], shape=(5,), dtype=float32)
tf.Tensor([0.9628435  0.1260069  0.7091991  0.5322705  0.17990789], shape=(5,), dtype=float32)
tf.Tensor([0.45632103 0.7629983  0.7159561  0.3232519  0.615567  ], shape=(5,), dtype=float32)
tf.Tensor([0.6440722  0.68059146 0.44278398 0.2063921  0.10284577], shape=(5,), dtype=float32)
conv2d_3 (1, 5, 32, 64)
tf.Tensor([0.6691217  0.78264594 0.824751   0.26307172 0.96421343], shape=(5,), dtype=float32)
tf.Tensor([0.7154063  0.9146035  0.7692885  0.7391261  0.16681582], shape=(5,), dtype=float32)
(64, 32, 5)
tf.Tensor([0.6691217  0.78264594 0.824751   0.26307172 0.96421343], shape=(5,), dtype=float32)
tf.Tensor([0.23752443 0.8208879  0.22980618 0.9135149  0.5766811 ], shape=(5,), dtype=float32)
tf.Tensor([0.7389343  0.904778   0.4652343  0.16325468 0.42805701], shape=(5,), dtype=float32)
tf.Tensor([0.52867204 0.3411153  0.7895243  0.7929256  0.95753527], shape=(5,), dtype=float32)
tf.Tensor([0.69177324 0.6811048  0.016969   0.08982138 0.21806256], shape=(5,), dtype=float32)
tf.Tensor([0.777339   0.3785053  0.11427519 0.2625033  0.10202753], shape=(5,), dtype=float32)
tf.Tensor([0.47925    0.1248368  0.789116   0.01038113 0.743464  ], shape=(5,), dtype=float32)
tf.Tensor([0.09108217 0.39051947 0.46928263 0.5241498  0.224127  ], shape=(5,), dtype=float32)
tf.Tensor([0.19724838 0.47158784 0.8496445  0.50664574 0.830257  ], shape=(5,), dtype=float32)
tf.Tensor([0.20407979 0.9677493  0.51823974 0.5236003  0.05742954], shape=(5,), dtype=float32)
tf.Tensor([0.7654629  0.9718369  0.66000444 0.04294256 0.23510511], shape=(5,), dtype=float32)
tf.Tensor([0.21245521 0.51751465 0.02818464 0.73327523 0.8700897 ], shape=(5,), dtype=float32)
tf.Tensor([0.8988357  0.13211076 0.09566683 0.6131167  0.78223246], shape=(5,), dtype=float32)
tf.Tensor([0.64351827 0.13968691 0.60226786 0.6932829  0.59652805], shape=(5,), dtype=float32)
tf.Tensor([0.31320462 0.01114845 0.4600892  0.32503274 0.45079076], shape=(5,), dtype=float32)
tf.Tensor([0.7386352  0.982854   0.5537263  0.96184534 0.8677389 ], shape=(5,), dtype=float32)
tf.Tensor([0.0191772  0.49887037 0.72434664 0.5519263  0.7265928 ], shape=(5,), dtype=float32)
tf.Tensor([0.7900825  0.65226585 0.15515317 0.57920647 0.71144664], shape=(5,), dtype=float32)
tf.Tensor([0.07048633 0.3836243  0.2552625  0.81904066 0.02411482], shape=(5,), dtype=float32)
tf.Tensor([0.6057506  0.42807406 0.8635087  0.06217024 0.12077332], shape=(5,), dtype=float32)
tf.Tensor([0.15488307 0.39049113 0.4249196  0.19256844 0.625978  ], shape=(5,), dtype=float32)
tf.Tensor([0.42424816 0.02372882 0.8592576  0.13996936 0.25280282], shape=(5,), dtype=float32)
tf.Tensor([0.69045544 0.43621734 0.31954098 0.3111992  0.1757985 ], shape=(5,), dtype=float32)
tf.Tensor([0.48798484 0.7511621  0.30482867 0.61441565 0.58085054], shape=(5,), dtype=float32)
tf.Tensor([0.86727667 0.9017433  0.26503512 0.49437076 0.73785144], shape=(5,), dtype=float32)
tf.Tensor([0.9222486  0.04029589 0.290751   0.2088553  0.3645542 ], shape=(5,), dtype=float32)
tf.Tensor([0.52376276 0.32412285 0.68567944 0.6916405  0.16597974], shape=(5,), dtype=float32)
tf.Tensor([0.80650496 0.92949194 0.5861135  0.5809876  0.20284046], shape=(5,), dtype=float32)
tf.Tensor([0.91086    0.71604884 0.43895683 0.4636437  0.26916337], shape=(5,), dtype=float32)
tf.Tensor([0.35408002 0.09365615 0.41300598 0.5840747  0.8383227 ], shape=(5,), dtype=float32)
tf.Tensor([0.47752193 0.40525863 0.09965087 0.8882597  0.8737533 ], shape=(5,), dtype=float32)
tf.Tensor([0.95126873 0.65310097 0.07894832 0.6859828  0.42895037], shape=(5,), dtype=float32)
tf.Tensor([0.8377418  0.45089987 0.40256995 0.15511486 0.26450422], shape=(5,), dtype=float32)
tf.Tensor([0.21630158 0.78341794 0.26213807 0.95168513 0.60683864], shape=(5,), dtype=float32)
tf.Tensor([0.3936093  0.84684765 0.82554233 0.07591587 0.09753172], shape=(5,), dtype=float32)
tf.Tensor([0.76674515 0.7192178  0.9694506  0.67641044 0.6731607 ], shape=(5,), dtype=float32)
tf.Tensor([0.9640239  0.8802318  0.84277433 0.2540707  0.13581723], shape=(5,), dtype=float32)
tf.Tensor([0.2654384  0.80384666 0.09382977 0.5800151  0.79479027], shape=(5,), dtype=float32)
tf.Tensor([0.03603507 0.45766103 0.66714346 0.08387361 0.17644969], shape=(5,), dtype=float32)
tf.Tensor([0.5098488  0.8625298  0.6958345  0.70648885 0.21086453], shape=(5,), dtype=float32)
tf.Tensor([0.9617578  0.10326358 0.07555611 0.21089077 0.75318277], shape=(5,), dtype=float32)
tf.Tensor([0.8661079  0.4315252  0.06959934 0.6683986  0.3573827 ], shape=(5,), dtype=float32)
tf.Tensor([0.19156033 0.48046556 0.14981976 0.29270077 0.34711158], shape=(5,), dtype=float32)
tf.Tensor([0.5237255  0.02051445 0.077705   0.43831292 0.65818894], shape=(5,), dtype=float32)
tf.Tensor([0.5289348  0.10901968 0.2957302  0.7923922  0.5328216 ], shape=(5,), dtype=float32)
tf.Tensor([0.768713   0.1920574  0.11330994 0.2723723  0.21608847], shape=(5,), dtype=float32)
tf.Tensor([0.6197997 0.0683305 0.6142901 0.2398526 0.9218071], shape=(5,), dtype=float32)
tf.Tensor([0.8414481  0.7233017  0.23404181 0.30340955 0.88225144], shape=(5,), dtype=float32)
tf.Tensor([0.8460586  0.50810975 0.9121755  0.21173704 0.73313606], shape=(5,), dtype=float32)
tf.Tensor([0.19819416 0.18306252 0.85218614 0.940235   0.0304677 ], shape=(5,), dtype=float32)
tf.Tensor([0.48151565 0.12012351 0.5816248  0.5794315  0.7925061 ], shape=(5,), dtype=float32)
tf.Tensor([0.52250814 0.65920776 0.5316733  0.7964157  0.24921748], shape=(5,), dtype=float32)
tf.Tensor([0.05543856 0.890879   0.04741095 0.06979847 0.9174134 ], shape=(5,), dtype=float32)
tf.Tensor([0.6311613  0.9063428  0.39518267 0.22561574 0.17861807], shape=(5,), dtype=float32)
tf.Tensor([0.6693985 0.8434207 0.5910074 0.4421919 0.5012737], shape=(5,), dtype=float32)
tf.Tensor([0.97894084 0.44086185 0.50316393 0.61992955 0.2999176 ], shape=(5,), dtype=float32)
tf.Tensor([0.53400826 0.31824932 0.6618079  0.4156716  0.90045196], shape=(5,), dtype=float32)
tf.Tensor([0.88168293 0.8988686  0.9317186  0.40526325 0.7998658 ], shape=(5,), dtype=float32)
tf.Tensor([0.22417493 0.20681433 0.55686563 0.80860335 0.2696547 ], shape=(5,), dtype=float32)
tf.Tensor([0.7179706  0.97315335 0.17932256 0.31343007 0.73942846], shape=(5,), dtype=float32)
tf.Tensor([0.18735138 0.06627197 0.3548292  0.3987453  0.9610045 ], shape=(5,), dtype=float32)
tf.Tensor([0.73990285 0.84448636 0.5726579  0.6225712  0.7655301 ], shape=(5,), dtype=float32)
tf.Tensor([0.0163893  0.64435786 0.25648826 0.5244044  0.6465132 ], shape=(5,), dtype=float32)
tf.Tensor([0.54863304 0.05035762 0.94756097 0.71014416 0.2605594 ], shape=(5,), dtype=float32)
trial 1 [21558.869742709805, 5896.142076568601, 0.030718175622630475, 3785.5845885965077, 129.66361036211558]
Accuracy now is 0.1913
New max accuracy is 0.1913
trial 2 [21539.764271716656, 7267.520514224841, 0.019551103549963755, 4026.1648560123213, 304.0880151426483]
Accuracy now is 0.1938
New max accuracy is 0.1938
trial 3 [6649.414797932021, 5804.743978514645, 0.024071868073616255, 3561.219158777914, 340.98816687320834]
Accuracy now is 0.197
New max accuracy is 0.197
trial 4 [14131.261717583558, 29245.130949366456, 0.02998583174467231, 2027.149526371582, 1284.8161600409624]
Accuracy now is 0.19219999999999998
trial 5 [12124.72396013083, 5583.084934091039, 0.010508257934959781, 2601.471999546695, 268.1481630546255]
Accuracy now is 0.19319999999999998
trial 6 [28589.119613457213, 20011.370981276108, 0.02115204854208413, 3473.744890117495, 1448.7516057682342]
Accuracy now is 0.1976
New max accuracy is 0.1976
trial 7 [19442.37274568934, 12477.239148739292, 0.006966436600162779, 2861.1273908101207, 820.7915602961921]
Accuracy now is 0.1996
New max accuracy is 0.1996
trial 8 [3201.048750305887, 22003.61334901633, 0.041082325311994856, 4664.049106149129, 381.65447695274037]
Accuracy now is 0.1874
trial 9 [17996.868636261745, 1149.9570501115477, 0.01305993572613004, 4734.66361939315, 1366.2476764362175]
Accuracy now is 0.1949
trial 10 [25879.648189433654, 3225.5083054622883, 0.017691252288834777, 4678.160197331798, 1340.1901261365394]
Accuracy now is 0.1966
params, loss [19442.37274568934, 12477.239148739292, 0.006966436600162779, 2861.1273908101207, 820.7915602961921] 0.7070062

ITER 0
time 08:18:24.742513
0 proposal [20589.9207267711, 12477.239148739292, 0.006966436600162779, 2861.1273908101207, 820.7915602961921] 0.70736015
1 proposal [18104.214757247966, 12477.239148739292, 0.006966436600162779, 2861.1273908101207, 820.7915602961921] 0.7064013
2 proposal [19887.243247844086, 12477.239148739292, 0.006966436600162779, 2861.1273908101207, 820.7915602961921] 0.7064339
3 proposal [22890.03124740298, 12477.239148739292, 0.006966436600162779, 2861.1273908101207, 820.7915602961921] 0.70697916
4 proposal [17929.16154331995, 12477.239148739292, 0.006966436600162779, 2861.1273908101207, 820.7915602961921] 0.7070327
5 proposal [19485.879649427006, 12477.239148739292, 0.006966436600162779, 2861.1273908101207, 820.7915602961921] 0.70739806
6 proposal [21166.505757911065, 12477.239148739292, 0.006966436600162779, 2861.1273908101207, 820.7915602961921] 0.70714796
7 proposal [20412.70696752423, 12477.239148739292, 0.006966436600162779, 2861.1273908101207, 820.7915602961921] 0.70674807
8 proposal [18775.498964468065, 12477.239148739292, 0.006966436600162779, 2861.1273908101207, 820.7915602961921] 0.7073618
9 proposal [20034.52199268193, 12477.239148739292, 0.006966436600162779, 2861.1273908101207, 820.7915602961921] 0.7066918
0 proposal [19442.37274568934, 11305.875691932386, 0.006966436600162779, 2861.1273908101207, 820.7915602961921] 0.70667106
1 proposal [19442.37274568934, 12024.947332661559, 0.006966436600162779, 2861.1273908101207, 820.7915602961921] 0.7073343
2 proposal [19442.37274568934, 12476.514769230113, 0.006966436600162779, 2861.1273908101207, 820.7915602961921] 0.70720255
3 proposal [19442.37274568934, 13845.743109878631, 0.006966436600162779, 2861.1273908101207, 820.7915602961921] 0.70745623
4 proposal [19442.37274568934, 14689.244051760914, 0.006966436600162779, 2861.1273908101207, 820.7915602961921] 0.70695704
5 proposal [19442.37274568934, 13578.19732340333, 0.006966436600162779, 2861.1273908101207, 820.7915602961921] 0.70781165
6 proposal [19442.37274568934, 11980.359910997988, 0.006966436600162779, 2861.1273908101207, 820.7915602961921] 0.70663023
7 proposal [19442.37274568934, 11066.96377412711, 0.006966436600162779, 2861.1273908101207, 820.7915602961921] 0.7065601
8 proposal [19442.37274568934, 11682.361157906305, 0.006966436600162779, 2861.1273908101207, 820.7915602961921] 0.7071642
9 proposal [19442.37274568934, 10663.904135142684, 0.006966436600162779, 2861.1273908101207, 820.7915602961921] 0.7080181
0 proposal [19442.37274568934, 12477.239148739292, 0.0022430298203219576, 2861.1273908101207, 820.7915602961921] 0.7069121
1 proposal [19442.37274568934, 12477.239148739292, 0.009336489562643428, 2861.1273908101207, 820.7915602961921] 0.7073501
2 proposal [19442.37274568934, 12477.239148739292, 0.007779992888329374, 2861.1273908101207, 820.7915602961921] 0.7077063
3 proposal [19442.37274568934, 12477.239148739292, 0.005022424771750038, 2861.1273908101207, 820.7915602961921] 0.70703816
4 proposal [19442.37274568934, 12477.239148739292, 0.0012615402928075371, 2861.1273908101207, 820.7915602961921] 0.70739096
5 proposal [19442.37274568934, 12477.239148739292, 0.008275997096629014, 2861.1273908101207, 820.7915602961921] 0.70677507
6 proposal [19442.37274568934, 12477.239148739292, 0.013061823137626404, 2861.1273908101207, 820.7915602961921] 0.7066163
7 proposal [19442.37274568934, 12477.239148739292, 0.0030616881935030286, 2861.1273908101207, 820.7915602961921] 0.70691186
8 proposal [19442.37274568934, 12477.239148739292, 0.0030398868171114526, 2861.1273908101207, 820.7915602961921] 0.7072596
9 proposal [19442.37274568934, 12477.239148739292, 0.0013613652099302648, 2861.1273908101207, 820.7915602961921] 0.7070201
0 proposal [19442.37274568934, 12477.239148739292, 0.006966436600162779, 2777.574550341569, 820.7915602961921] 0.7073258
1 proposal [19442.37274568934, 12477.239148739292, 0.006966436600162779, 3018.53221853056, 820.7915602961921] 0.7081294
2 proposal [19442.37274568934, 12477.239148739292, 0.006966436600162779, 3153.054786441394, 820.7915602961921] 0.7067772
3 proposal [19442.37274568934, 12477.239148739292, 0.006966436600162779, 2922.4943871954665, 820.7915602961921] 0.7068462
4 proposal [19442.37274568934, 12477.239148739292, 0.006966436600162779, 2814.2819793947056, 820.7915602961921] 0.70767754
5 proposal [19442.37274568934, 12477.239148739292, 0.006966436600162779, 2925.890140266544, 820.7915602961921] 0.70742995
6 proposal [19442.37274568934, 12477.239148739292, 0.006966436600162779, 2571.2900699988504, 820.7915602961921] 0.70779586
7 proposal [19442.37274568934, 12477.239148739292, 0.006966436600162779, 2814.957287186718, 820.7915602961921] 0.70696455
8 proposal [19442.37274568934, 12477.239148739292, 0.006966436600162779, 2917.379337313889, 820.7915602961921] 0.7068596
9 proposal [19442.37274568934, 12477.239148739292, 0.006966436600162779, 2768.9159969133766, 820.7915602961921] 0.7082315
0 proposal [19442.37274568934, 12477.239148739292, 0.006966436600162779, 2861.1273908101207, 673.2078378136639] 0.70677966
1 proposal [19442.37274568934, 12477.239148739292, 0.006966436600162779, 2861.1273908101207, 981.0474260184601] 0.7080119
2 proposal [19442.37274568934, 12477.239148739292, 0.006966436600162779, 2861.1273908101207, 916.6888102382555] 0.7073832
3 proposal [19442.37274568934, 12477.239148739292, 0.006966436600162779, 2861.1273908101207, 901.4930907644816] 0.70726174
4 proposal [19442.37274568934, 12477.239148739292, 0.006966436600162779, 2861.1273908101207, 856.1721000801404] 0.7072588
5 proposal [19442.37274568934, 12477.239148739292, 0.006966436600162779, 2861.1273908101207, 830.5629414964682] 0.70782465
6 proposal [19442.37274568934, 12477.239148739292, 0.006966436600162779, 2861.1273908101207, 878.6060167005513] 0.70652354
7 proposal [19442.37274568934, 12477.239148739292, 0.006966436600162779, 2861.1273908101207, 684.8138906651898] 0.7073414
8 proposal [19442.37274568934, 12477.239148739292, 0.006966436600162779, 2861.1273908101207, 854.0769849213042] 0.7068836
9 proposal [19442.37274568934, 12477.239148739292, 0.006966436600162779, 2861.1273908101207, 855.5737079706446] 0.70654845
ACCEPTED
Epoch 100, Loss: 1.349730372428894, Real Acc: 52.0, Fake Acc: 70.0
T, p_accept, rand, s_current, loss_curr 1.0 1 0.14064144409336654 [18104.214757247966, 12477.239148739292, 0.006966436600162779, 2861.1273908101207, 820.7915602961921] 0.7064013
conv2d (1, 5, 2, 32)
tf.Tensor([0.79221493 0.27376375 0.1984071  0.2941794  0.7694783 ], shape=(5,), dtype=float32)
tf.Tensor([0.10335445 0.45006916 0.23987639 0.2860231  0.5626891 ], shape=(5,), dtype=float32)
(32, 2, 5)
tf.Tensor([0.79221493 0.27376375 0.1984071  0.2941794  0.7694783 ], shape=(5,), dtype=float32)
tf.Tensor([0.2872742  0.38099477 0.2353939  0.6882893  0.76880574], shape=(5,), dtype=float32)
tf.Tensor([0.78320146 0.8116629  0.7659131  0.34180072 0.3987151 ], shape=(5,), dtype=float32)
tf.Tensor([0.57802427 0.14867017 0.18475182 0.15534925 0.6206963 ], shape=(5,), dtype=float32)
tf.Tensor([0.6305555  0.6125337  0.34839982 0.46892712 0.3432346 ], shape=(5,), dtype=float32)
tf.Tensor([0.66977704 0.739427   0.50617045 0.23942362 0.1776815 ], shape=(5,), dtype=float32)
tf.Tensor([0.6944825  0.65661097 0.1865092  0.5444184  0.5671844 ], shape=(5,), dtype=float32)
tf.Tensor([0.41151956 0.1703738  0.5327768  0.20631616 0.8543718 ], shape=(5,), dtype=float32)
tf.Tensor([0.18956316 0.17041126 0.09339771 0.30461606 0.46245587], shape=(5,), dtype=float32)
tf.Tensor([0.8606937  0.48000273 0.78601116 0.6552328  0.48334053], shape=(5,), dtype=float32)
tf.Tensor([0.36548352 0.25397816 0.4452557  0.386519   0.57611966], shape=(5,), dtype=float32)
tf.Tensor([0.8681381  0.5789634  0.61429834 0.3755939  0.8040999 ], shape=(5,), dtype=float32)
tf.Tensor([0.1435982  0.1708538  0.5791285  0.13657045 0.27177587], shape=(5,), dtype=float32)
tf.Tensor([0.2568333  0.8148281  0.18864183 0.80984014 0.17979504], shape=(5,), dtype=float32)
tf.Tensor([0.7029944  0.44566664 0.59465814 0.86181694 0.17707327], shape=(5,), dtype=float32)
tf.Tensor([0.7166594  0.6541475  0.16935882 0.7199885  0.61936134], shape=(5,), dtype=float32)
tf.Tensor([0.6236911  0.7791959  0.55745167 0.23637214 0.5752759 ], shape=(5,), dtype=float32)
tf.Tensor([0.80656314 0.17316961 0.32365915 0.67200494 0.7040504 ], shape=(5,), dtype=float32)
tf.Tensor([0.18896514 0.37168652 0.5733585  0.21088348 0.5634674 ], shape=(5,), dtype=float32)
tf.Tensor([0.38654768 0.33475432 0.467442   0.366076   0.717295  ], shape=(5,), dtype=float32)
tf.Tensor([0.48007515 0.15028179 0.67967856 0.28150213 0.13827208], shape=(5,), dtype=float32)
tf.Tensor([0.6838509  0.18485641 0.7226633  0.5810256  0.65598464], shape=(5,), dtype=float32)
tf.Tensor([0.26002064 0.6175878  0.45474002 0.7603876  0.8124121 ], shape=(5,), dtype=float32)
tf.Tensor([0.5682819  0.63852453 0.23403676 0.5229659  0.85481685], shape=(5,), dtype=float32)
tf.Tensor([0.74838537 0.7858481  0.7260085  0.39678884 0.29890388], shape=(5,), dtype=float32)
tf.Tensor([0.7606251  0.78744096 0.29648602 0.1474186  0.37475654], shape=(5,), dtype=float32)
tf.Tensor([0.46793395 0.7046656  0.8066835  0.51948434 0.7994252 ], shape=(5,), dtype=float32)
tf.Tensor([0.6518728  0.677691   0.35623407 0.2514265  0.14828624], shape=(5,), dtype=float32)
tf.Tensor([0.8045466  0.7040919  0.14897355 0.55737257 0.17939425], shape=(5,), dtype=float32)
tf.Tensor([0.8449456  0.23136878 0.6278436  0.5303181  0.27064398], shape=(5,), dtype=float32)
tf.Tensor([0.48829958 0.64053833 0.6550419  0.3738812  0.58224213], shape=(5,), dtype=float32)
tf.Tensor([0.5979901  0.643536   0.4865374  0.32066497 0.23648426], shape=(5,), dtype=float32)
conv2d_1 (1, 5, 32, 64)
tf.Tensor([0.6268057  0.71502656 0.7615292  0.28634566 0.8853805 ], shape=(5,), dtype=float32)
tf.Tensor([0.68638146 0.7910608  0.6771475  0.6420267  0.30377817], shape=(5,), dtype=float32)
(64, 32, 5)
tf.Tensor([0.6268057  0.71502656 0.7615292  0.28634566 0.8853805 ], shape=(5,), dtype=float32)
tf.Tensor([0.35264546 0.7345962  0.31412745 0.80161047 0.5734927 ], shape=(5,), dtype=float32)
tf.Tensor([0.7130404  0.74849504 0.5164572  0.2556532  0.41725236], shape=(5,), dtype=float32)
tf.Tensor([0.5005585  0.33886176 0.7080018  0.700994   0.8228632 ], shape=(5,), dtype=float32)
tf.Tensor([0.68789786 0.71069473 0.06749258 0.2951453  0.36714143], shape=(5,), dtype=float32)
tf.Tensor([0.63797027 0.38509253 0.19544995 0.28316158 0.18249935], shape=(5,), dtype=float32)
tf.Tensor([0.5358199  0.28444654 0.7179745  0.20181839 0.7710921 ], shape=(5,), dtype=float32)
tf.Tensor([0.21542744 0.42179805 0.44488892 0.4924387  0.27019843], shape=(5,), dtype=float32)
tf.Tensor([0.28141347 0.5076608  0.66841227 0.5808197  0.73198485], shape=(5,), dtype=float32)
tf.Tensor([0.26031658 0.8029348  0.45709455 0.46474162 0.14930665], shape=(5,), dtype=float32)
tf.Tensor([0.66554844 0.8046178  0.6377838  0.15861745 0.41332772], shape=(5,), dtype=float32)
tf.Tensor([0.32225505 0.5406231  0.19972882 0.6766774  0.80174583], shape=(5,), dtype=float32)
tf.Tensor([0.7745925  0.22698288 0.21031535 0.55851746 0.64976853], shape=(5,), dtype=float32)
tf.Tensor([0.66435355 0.3047162  0.5951767  0.7131997  0.57170755], shape=(5,), dtype=float32)
tf.Tensor([0.33982015 0.11422742 0.4376827  0.35053015 0.42714146], shape=(5,), dtype=float32)
tf.Tensor([0.6253011  0.81126267 0.5094275  0.78868437 0.7190403 ], shape=(5,), dtype=float32)
tf.Tensor([0.13462947 0.4770092  0.6191655  0.5054773  0.63551724], shape=(5,), dtype=float32)
tf.Tensor([0.7651551  0.6586516  0.29240942 0.59726954 0.70273465], shape=(5,), dtype=float32)
tf.Tensor([0.22491598 0.3240905  0.30543005 0.6589141  0.17493   ], shape=(5,), dtype=float32)
tf.Tensor([0.5067465  0.40126503 0.69962436 0.14939636 0.16953333], shape=(5,), dtype=float32)
tf.Tensor([0.18484879 0.40501744 0.51224124 0.3087338  0.7056945 ], shape=(5,), dtype=float32)
tf.Tensor([0.3637435  0.13039036 0.68720424 0.19194016 0.2842561 ], shape=(5,), dtype=float32)
tf.Tensor([0.5933806  0.38873568 0.3335935  0.33928216 0.2065665 ], shape=(5,), dtype=float32)
tf.Tensor([0.5301789  0.6535863  0.3820021  0.5732456  0.58752996], shape=(5,), dtype=float32)
tf.Tensor([0.80693305 0.75830126 0.39560857 0.47779334 0.64448   ], shape=(5,), dtype=float32)
tf.Tensor([0.8138116  0.16556062 0.36806902 0.27947754 0.39750957], shape=(5,), dtype=float32)
tf.Tensor([0.57654566 0.44678214 0.6395555  0.72518814 0.31781378], shape=(5,), dtype=float32)
tf.Tensor([0.7417936  0.82656634 0.5660341  0.5776713  0.27713984], shape=(5,), dtype=float32)
tf.Tensor([0.84498274 0.6683318  0.47572064 0.54988384 0.40996885], shape=(5,), dtype=float32)
tf.Tensor([0.48846325 0.20765261 0.4197526  0.56516814 0.7451017 ], shape=(5,), dtype=float32)
tf.Tensor([0.5448421  0.39479217 0.2224714  0.6856579  0.8641174 ], shape=(5,), dtype=float32)
tf.Tensor([0.8611154  0.6284675  0.21533397 0.5686327  0.47126523], shape=(5,), dtype=float32)
tf.Tensor([0.8111274  0.49523503 0.48701176 0.32163838 0.41872585], shape=(5,), dtype=float32)
tf.Tensor([0.36603084 0.73752517 0.349211   0.834286   0.592235  ], shape=(5,), dtype=float32)
tf.Tensor([0.43341148 0.66340536 0.7139668  0.15474385 0.1506298 ], shape=(5,), dtype=float32)
tf.Tensor([0.6560041  0.6006729  0.7791147  0.5778438  0.57079494], shape=(5,), dtype=float32)
tf.Tensor([0.8368233  0.72854185 0.6834074  0.2947526  0.18529826], shape=(5,), dtype=float32)
tf.Tensor([0.2732736  0.64220595 0.16240118 0.481038   0.6540537 ], shape=(5,), dtype=float32)
tf.Tensor([0.31250167 0.61196226 0.60120726 0.12502792 0.12016679], shape=(5,), dtype=float32)
tf.Tensor([0.47032905 0.69566756 0.59147483 0.627372   0.23602529], shape=(5,), dtype=float32)
tf.Tensor([0.8723708  0.2257247  0.22847398 0.30633298 0.72619236], shape=(5,), dtype=float32)
tf.Tensor([0.7030688  0.3974795  0.1369569  0.5699476  0.35095796], shape=(5,), dtype=float32)
tf.Tensor([0.25389364 0.43594956 0.24892415 0.31227943 0.34106535], shape=(5,), dtype=float32)
tf.Tensor([0.55450493 0.14305314 0.1972466  0.4543297  0.6962488 ], shape=(5,), dtype=float32)
tf.Tensor([0.45623818 0.11854217 0.29677686 0.62933147 0.4263704 ], shape=(5,), dtype=float32)
tf.Tensor([0.7308674  0.3132002  0.28116047 0.3849373  0.38611212], shape=(5,), dtype=float32)
tf.Tensor([0.6349137  0.16062942 0.607075   0.30749932 0.83017516], shape=(5,), dtype=float32)
tf.Tensor([0.83977824 0.6702315  0.3697267  0.3061103  0.8499007 ], shape=(5,), dtype=float32)
tf.Tensor([0.7825997  0.5614171  0.8814018  0.3732486  0.63298756], shape=(5,), dtype=float32)
tf.Tensor([0.31997114 0.2753458  0.77435523 0.7773084  0.23109448], shape=(5,), dtype=float32)
tf.Tensor([0.48692647 0.2416842  0.5425314  0.5540185  0.72645295], shape=(5,), dtype=float32)
tf.Tensor([0.5599099  0.64540684 0.52572864 0.74171793 0.43019637], shape=(5,), dtype=float32)
tf.Tensor([0.32556987 0.8051433  0.1833882  0.25017527 0.86171657], shape=(5,), dtype=float32)
tf.Tensor([0.56134266 0.74327236 0.3710258  0.26024377 0.26527423], shape=(5,), dtype=float32)
tf.Tensor([0.6438794  0.8010129  0.55432385 0.5095287  0.38472942], shape=(5,), dtype=float32)
tf.Tensor([0.8422994  0.45801708 0.48824838 0.5835803  0.387471  ], shape=(5,), dtype=float32)
tf.Tensor([0.5986421  0.41085917 0.6566889  0.43622336 0.8395508 ], shape=(5,), dtype=float32)
tf.Tensor([0.7881046 0.8353398 0.7775331 0.4939416 0.7316585], shape=(5,), dtype=float32)
tf.Tensor([0.33958155 0.3768931  0.6203679  0.77420324 0.45519543], shape=(5,), dtype=float32)
tf.Tensor([0.7051462  0.8745803  0.26128066 0.42405015 0.70710695], shape=(5,), dtype=float32)
tf.Tensor([0.24061404 0.14856851 0.368699   0.39454466 0.8100961 ], shape=(5,), dtype=float32)
tf.Tensor([0.66435695 0.82083386 0.5339085  0.6632438  0.6290814 ], shape=(5,), dtype=float32)
tf.Tensor([0.14615019 0.5495699  0.30302936 0.4891067  0.5487855 ], shape=(5,), dtype=float32)
tf.Tensor([0.4951893  0.12196764 0.78521645 0.60175633 0.28734034], shape=(5,), dtype=float32)
[[19442.37274568934, 12477.239148739292, 0.006966436600162779, 2861.1273908101207, 820.7915602961921], [18104.214757247966, 12477.239148739292, 0.006966436600162779, 2861.1273908101207, 820.7915602961921]]
[0.7070062, 0.7064013]
